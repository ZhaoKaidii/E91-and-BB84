{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.8747698746937553\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import optimize, special\n",
    "from numpy import *\n",
    "from pylab import *\n",
    "import decimal\n",
    "import matplotlib as mpl\n",
    "import random\n",
    "\n",
    "n=0\n",
    "total=5000\n",
    "##define basis and initial state (bell state)\n",
    "V=np.array([[[[0,0],[0,0]],[[0,0],[0,0]],[[0,0],[0,0]],[[0,0],[0,0]]],[[[0,0],[0,0]],[[0,0],[0,0]],[[0,0],[0,0]],[[0,0],[0,0]]],[[[0,0],[0,0]],[[0,0],[0,0]],[[0,0],[0,0]],[[0,0],[0,0]]],[[[0,0],[0,0]],[[0,0],[0,0]],[[0,0],[0,0]],[[0,0],[0,0]]]])\n",
    "T=np.array([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]])\n",
    "theta1=[0.25*math.pi,0,0.25*math.pi,0.5*math.pi]\n",
    "phi1=[0,0,math.pi,math.pi]\n",
    "theta2=[0.5*math.pi,0.25*math.pi,0,0.25*math.pi]\n",
    "phi2=[0,0,0,math.pi]\n",
    "ISAB=[[0,0,0,0],[0,1,1,0],[0,1,1,0],[0,0,0,0]]\n",
    "\n",
    "\n",
    "while n<total:\n",
    "    BasisA=random.randint(0,3)\n",
    "    bitA=random.randint(0,1)\n",
    "\n",
    "    ThetaA=((-1)**(bitA+1))*theta1[BasisA]+(math.pi)*(2-2**(bitA))\n",
    "    PhiA=phi1[BasisA]+(math.pi)*(2-2**(bitA))\n",
    "\n",
    "    a=round(0.5*math.cos(ThetaA),15)\n",
    "    b=round(0.5*math.cos(PhiA)*math.sin(ThetaA),15)\n",
    "    c=round(0.5*math.sin(ThetaA)*math.sin(PhiA),15)\n",
    "    MeasureA=[[(0.5+a),0,(complex(b,-1*c)),0],[0,(0.5+a),0,complex(b,-1*c)],[complex(b,c),0,(0.5-a),0],[0,complex(b,c),0,(0.5-a)]]\n",
    "\n",
    "    Sama=np.dot(MeasureA,ISAB)\n",
    "    pa=trace(Sama)\n",
    "    StateB=[[Sama[0][0]+Sama[2][2],Sama[0][1]+Sama[2][3]],[Sama[1][0]+Sama[3][2],Sama[1][1]+Sama[3][3]]]\n",
    "\n",
    "    BasisB=random.randint(0,3)\n",
    "\n",
    "\n",
    "    ThetaB1=theta2[BasisB]\n",
    "    PhiB1=phi2[BasisB]\n",
    "\n",
    "    a1=round(0.5*math.cos(ThetaB1),15)\n",
    "    b1=round(0.5*math.cos(PhiB1)*math.sin(ThetaB1),15)\n",
    "    c1=round(0.5*math.sin(ThetaB1)*math.sin(PhiB1),15)\n",
    "\n",
    "\n",
    "    MeasureB=[[0.5+a1,complex(b1,-1*c1)],[complex(b1,c1),0.5-a1]]\n",
    "\n",
    "    ResultB=np.dot(MeasureB,StateB)\n",
    "    Pb1=round(real(trace(ResultB)),10)\n",
    "    Pb0=abs(1-Pb1)\n",
    "    p = np.array([Pb1,Pb0])\n",
    "    bitB = np.random.choice([0, 1], p = p.ravel())\n",
    "\n",
    "    R=V[BasisB][BasisA][bitB][bitA]\n",
    "    F=T[BasisB][BasisA]\n",
    "    R=R+1\n",
    "    F=F+1\n",
    "    V[BasisB][BasisA][bitB][bitA]=R\n",
    "    T[BasisB][BasisA]=F\n",
    "    \n",
    "    n=n+1\n",
    "    \n",
    "else:\n",
    "    \n",
    "    #Bell teat, see if the result violats the Bell's theorem\n",
    "    \n",
    "    P2000=(V[2][0][0][0])/T[2][0]\n",
    "    P2001=(V[2][0][0][1])/T[2][0]\n",
    "    P2010=(V[2][0][1][0])/T[2][0]\n",
    "    P2011=(V[2][0][1][1])/T[2][0]\n",
    "    E20=P2000-P2001+P2011-P2010\n",
    "    \n",
    "    P0000=(V[0][0][0][0])/T[0][0]\n",
    "    P0001=(V[0][0][0][1])/T[0][0]\n",
    "    P0010=(V[0][0][1][0])/T[0][0]\n",
    "    P0011=(V[0][0][1][1])/T[0][0]\n",
    "    E00=P0000-P0001+P0011-P0010\n",
    "    \n",
    "    P2200=(V[2][2][0][0])/T[2][2]\n",
    "    P2201=(V[2][2][0][1])/T[2][2]\n",
    "    P2210=(V[2][2][1][0])/T[2][2]\n",
    "    P2211=(V[2][2][1][1])/T[2][2]\n",
    "    E22=P2200-P2201+P2211-P2210\n",
    "    \n",
    "    P0200=(V[0][2][0][0])/T[0][2]\n",
    "    P0201=(V[0][2][0][1])/T[0][2]\n",
    "    P0210=(V[0][2][1][0])/T[0][2]\n",
    "    P0211=(V[0][2][1][1])/T[0][2]\n",
    "    E02=P0200-P0201+P0211-P0210\n",
    "    \n",
    "    S=E20-E00+E22+E02\n",
    "\n",
    "print(S)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
